---
- name: Install K3s on remote server (local kubeconfig)
  hosts: masters
  become: true
  gather_facts: false
  vars:
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
  tasks:
    - name: Wait for SSH connection
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 300

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
        force_apt_get: yes
      register: apt_update_result
      until: apt_update_result is succeeded
      retries: 3
      delay: 10

    - name: Install dependencies
      apt:
        name:
          - curl
          - apt-transport-https
          - ca-certificates
        state: present

    - name: Check if k3s is already installed
      stat:
        path: /usr/local/bin/k3s
      register: k3s_binary

    - name: Install k3s
      shell: curl -sfL https://get.k3s.io | sh -
      when: not k3s_binary.stat.exists

    - name: Wait for k3s service to start
      wait_for:
        path: /var/lib/rancher/k3s/server/node-token
        timeout: 60

    - name: Verify k3s service is running
      systemd:
        name: k3s
        state: started
        enabled: yes

    - name: Create .kube directory for ansible user
      become: yes
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy kubeconfig to ansible user's .kube directory
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Set KUBECONFIG environment variable for ansible user
      become: yes
      lineinfile:
        path: /home/{{ ansible_user }}/.bashrc
        line: 'export KUBECONFIG=/home/{{ ansible_user }}/.kube/config'
        create: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

